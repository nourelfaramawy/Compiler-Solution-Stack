package csen1002.tests.task7;

import static org.junit.jupiter.api.Assertions.*;

import java.util.List;
import java.util.StringJoiner;
import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.Vocabulary;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task7.Task7Lexer;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task7TestsBatch7{
	
	/**
	 * Returns a string of tokenized lexemes.
	 *
	 * @param input is the string to be tokenized.
	 * @return Returns a formatted string representation of the list of tokens. The
	 *         string representation follows the one in the task description
	 */
	public static String tokenStream(String input) {
		// In case Task7Lexer is not defined correctly:
		// 1- If you modified the grammar in the g4 file, regenerate the ANTLR
		// recognizer to make sure that the latest grammar is generated
		// 2- Make sure that the location and the package are configured properly
		Task7Lexer lexer = new Task7Lexer(CharStreams.fromString(input));
		Vocabulary vocabulary = lexer.getVocabulary();
		List<? extends Token> tokens = lexer.getAllTokens();
		StringJoiner stringJoiner = new StringJoiner(";");
		for (Token token : tokens) {
			stringJoiner.add(token.getText() + "," + vocabulary.getSymbolicName(token.getType()));
		}
		return stringJoiner.toString();
	}


	@Test
	public void testString1() {
		assertEquals("100,ZERO;001,ZERO;100,ZERO;111,ONE;111,ONE;011,ONE;000,ONE;101,ZERO;011,ONE;000,ONE;100,ZERO;111,ONE;000,ONE;001,ZERO;000,ONE;001,ZERO;111,ONE;000,ONE;010,ZERO;000,ONE;010,ZERO;110,ZERO;001,ZERO;011,ONE;010,ZERO;101,ZERO;001,ZERO;010,ZERO;111,ONE;100,ZERO;010,ZERO;011,ONE;111,ONE;100,ZERO;011,ONE;000,ONE;110,ZERO;111,ONE;100,ZERO;100,ZERO;001,ZERO;110,ZERO;010,ZERO;000,ONE;000,ONE;111,ONE;001,ZERO;100,ZERO;111,ONE;011,ONE;011,ONE;001,ZERO;010,ZERO;000,ONE;011,ONE;111,ONE;010,ZERO;011,ONE;110,ZERO;111,ONE;010,ZERO;110,ZERO;001,ZERO;001,ZERO;000,ONE;001,ZERO;100,ZERO;011,ONE", 
        tokenStream("100001100111111011000101011000100111000001000001111000010000010110001011010101001010111100010011111100011000110111100100001110010000000111001100111011011001010000011111010011110111010110001001000001100011"));
	}

	@Test
	public void testString2() {
		assertEquals("110,ZERO;100,ZERO;100,ZERO;100,ZERO;010,ZERO;111,ONE;101,ZERO;000,ONE;000,ONE;110,ZERO;101,ZERO;100,ZERO;110,ZERO;01,ERROR", 
        tokenStream("11010010010001011110100000011010110011001"));
	}

	@Test
	public void testString3() {
		assertEquals("110,ZERO;100,ZERO;110,ZERO;110,ZERO;111,ONE;001,ZERO;011,ONE;001,ZERO;011,ONE;101,ZERO;110,ZERO;011,ONE;111,ONE;100,ZERO;101,ZERO;000,ONE;001,ZERO;111,ONE;101,ZERO;001,ZERO;010,ZERO;010,ZERO;111,ONE;110,ZERO;100,ZERO;011,ONE;011,ONE;010,ZERO;000,ONE;011,ONE;001,ZERO;010,ZERO;100,ZERO;110,ZERO;100,ZERO;000,ONE;011,ONE;010,ZERO;001,ZERO;101,ZERO;010,ZERO;110,ZERO;000,ONE;110,ZERO;110,ZERO;100,ZERO;100,ZERO;010,ZERO;100,ZERO;111,ONE;011,ONE;001,ZERO;000,ONE;111,ONE;101,ZERO;010,ZERO;101,ZERO;011,ONE;101,ZERO;001,ZERO;101,ZERO;010,ZERO;011,ONE;010,ZERO;111,ONE;110,ZERO;100,ZERO;011,ONE;110,ZERO;110,ZERO;000,ONE;000,ONE;010,ZERO;011,ONE;111,ONE;110,ZERO;101,ZERO;000,ONE;111,ONE;111,ONE;100,ZERO;101,ZERO;101,ZERO;001,ZERO;100,ZERO;010,ZERO;110,ZERO;110,ZERO;100,ZERO;001,ZERO;101,ZERO;000,ONE;000,ONE;101,ZERO;101,ZERO;001,ZERO;101,ZERO;101,ZERO;000,ONE;010,ZERO;000,ONE;001,ZERO;100,ZERO;010,ZERO;111,ONE;000,ONE;011,ONE;001,ZERO;011,ONE;011,ONE;010,ZERO", 
        tokenStream("110100110110111001011001011101110011111100101000001111101001010010111110100011011010000011001010100110100000011010001101010110000110110100100010100111011001000111101010101011101001101010011010111110100011110110000000010011111110101000111111100101101001100010110110100001101000000101101001101101000010000001100010111000011001011011010"));
	}

	@Test
	public void testString4() {
		assertEquals
        tokenStream("011101101001011010000000101010100010101000111001010010101101010000010010000010001000101110000010000101101101101001100100100001000011111001010010101010000010010000001111000100100001001100000100101100101011011001100110000110000100"));
	}

	@Test
	public void testString5() {
		assertEquals
        tokenStream("01010110110011001010111010001100010100100001001010000011101100110101110110000111010100001001001100000110011001010010011101101001010111010110000000011110111101011111100010101000010011"));
	}

	@Test
	public void testString6() {
		assertEquals("110,ZERO;101,ZERO;101,ZERO;000,ONE;100,ZERO;100,ZERO;001,ZERO;000,ONE;100,ZERO;100,ZERO;000,ONE;001,ZERO;110,ZERO;101,ZERO;110,ZERO;111,ONE;110,ZERO;101,ZERO;010,ZERO;000,ONE;000,ONE;100,ZERO;110,ZERO;110,ZERO;111,ONE;110,ZERO;110,ZERO;011,ONE;010,ZERO;000,ONE;011,ONE;111,ONE;111,ONE;110,ZERO;010,ZERO;111,ONE;001,ZERO;110,ZERO;001,ZERO;101,ZERO;111,ONE;001,ZERO;101,ZERO;110,ZERO;100,ZERO;011,ONE;010,ZERO;010,ZERO;010,ZERO;111,ONE;110,ZERO;010,ZERO;110,ZERO;011,ONE;011,ONE;000,ONE;111,ONE;100,ZERO;010,ZERO;010,ZERO;001,ZERO;010,ZERO;011,ONE;101,ZERO;000,ONE;111,ONE;100,ZERO;110,ZERO;000,ONE;000,ONE;000,ONE;010,ZERO;001,ZERO;100,ZERO;101,ZERO;101,ZERO;100,ZERO;110,ZERO;10,ERROR", 
        tokenStream("11010110100010010000100010010000000111010111011111010101000000010011011011111011001101000001111111111001011100111000110111100110111010001101001001011111001011001101100011110001001000101001110100011110011000000000001000110010110110011010"));
	}

	@Test
	public void testString7() {
		assertEquals("101,ZERO;011,ONE;010,ZERO;010,ZERO;111,ONE;110,ZERO;011,ONE;110,ZERO;011,ONE;001,ZERO;111,ONE;100,ZERO;101,ZERO;110,ZERO;011,ONE;110,ZERO;000,ONE;101,ZERO;110,ZERO;010,ZERO;101,ZERO;101,ZERO;111,ONE;010,ZERO;001,ZERO;001,ZERO;010,ZERO;100,ZERO;111,ONE;101,ZERO;000,ONE;011,ONE;100,ZERO;001,ZERO;101,ZERO;011,ONE;100,ZERO;100,ZERO;100,ZERO;010,ZERO;101,ZERO;100,ZERO;010,ZERO;111,ONE;101,ZERO;110,ZERO;000,ONE;001,ZERO;010,ZERO;010,ZERO;100,ZERO;001,ZERO;010,ZERO;111,ONE;010,ZERO;101,ZERO;101,ZERO;001,ZERO;011,ONE;010,ZERO;110,ZERO;010,ZERO;010,ZERO;011,ONE;100,ZERO;111,ONE;011,ONE;001,ZERO;011,ONE;001,ZERO;010,ZERO;001,ZERO;000,ONE;010,ZERO;010,ZERO;100,ZERO;100,ZERO;010,ZERO;110,ZERO;010,ZERO;111,ONE;101,ZERO;010,ZERO;101,ZERO;000,ONE;101,ZERO;000,ONE;011,ONE;000,ONE;000,ONE;101,ZERO;001,ZERO;110,ZERO;000,ONE;100,ZERO;000,ONE;111,ONE;000,ONE;100,ZERO;100,ZERO;010,ZERO;001,ZERO;100,ZERO;100,ZERO;110,ZERO;110,ZERO;010,ZERO;111,ONE;101,ZERO;001,ZERO;001,ZERO;000,ONE;110,ZERO;000,ONE;111,ONE", 
        tokenStream("101011010010111110011110011001111100101110011110000101110010101101111010001001010100111101000011100001101011100100100010101100010111101110000001010010100001010111010101101001011010110010010011100111011001011001010001000010010100100010110010111101010101000101000011000000101001110000100000111000100100010001100100110110010111101001001000110000111"));
	}

	@Test
	public void testString8() {
		assertEquals("100,ZERO;110,ZERO;011,ONE;101,ZERO;100,ZERO;010,ZERO;011,ONE;010,ZERO;011,ONE;010,ZERO;000,ONE;010,ZERO;110,ZERO;010,ZERO;000,ONE;100,ZERO;001,ZERO;110,ZERO;110,ZERO;010,ZERO;110,ZERO;110,ZERO;111,ONE;001,ZERO;010,ZERO;010,ZERO;101,ZERO;000,ONE;001,ZERO;001,ZERO;001,ZERO;001,ZERO;000,ONE;101,ZERO;101,ZERO;100,ZERO;100,ZERO;110,ZERO;100,ZERO;001,ZERO;000,ONE;110,ZERO;011,ONE;101,ZERO;010,ZERO;001,ZERO;101,ZERO;101,ZERO;000,ONE;011,ONE;000,ONE;111,ONE;000,ONE;001,ZERO;011,ONE;110,ZERO;110,ZERO;111,ONE;110,ZERO;001,ZERO;011,ONE;110,ZERO;100,ZERO;111,ONE;000,ONE;100,ZERO;111,ONE;101,ZERO;101,ZERO;001,ZERO;1,ERROR", 
        tokenStream("1001100111011000100110100110100000101100100001000011101100101101101110010100101010000010010010010001011011001001101000010001100111010100011011010000110001110000010111101101111100010111101001110001001111011010011"));
	}

	@Test
	public void testString9() {
		assertEquals("011,ONE;101,ZERO;110,ZERO;001,ZERO;001,ZERO;011,ONE;011,ONE;111,ONE;010,ZERO;001,ZERO;000,ONE;001,ZERO;010,ZERO;111,ONE;110,ZERO;100,ZERO;101,ZERO;010,ZERO;111,ONE;110,ZERO;111,ONE;010,ZERO;100,ZERO;010,ZERO;110,ZERO;000,ONE;100,ZERO;100,ZERO;100,ZERO;001,ZERO;110,ZERO;010,ZERO;001,ZERO;010,ZERO;110,ZERO;000,ONE;111,ONE;010,ZERO;101,ZERO;010,ZERO;101,ZERO;001,ZERO;010,ZERO;000,ONE;000,ONE;111,ONE;111,ONE;010,ZERO;011,ONE;010,ZERO;010,ZERO;010,ZERO;1,ERROR", 
        tokenStream("0111011100010010110111110100010000010101111101001010101111101110101000101100001001001000011100100010101100001110101010101010010100000001111110100110100100101"));
	}

	@Test
	public void testString10() {
		assertEquals("110,ZERO;010,ZERO;111,ONE;001,ZERO;111,ONE;000,ONE;010,ZERO;001,ZERO;011,ONE;111,ONE;001,ZERO;001,ZERO;011,ONE;111,ONE;011,ONE;111,ONE;101,ZERO;110,ZERO;001,ZERO;100,ZERO;011,ONE;111,ONE;010,ZERO;110,ZERO;010,ZERO;111,ONE;001,ZERO;111,ONE;100,ZERO;101,ZERO;001,ZERO;010,ZERO;000,ONE;001,ZERO;011,ONE;011,ONE;101,ZERO;111,ONE;001,ZERO;111,ONE;011,ONE;000,ONE;101,ZERO;110,ZERO;101,ZERO;011,ONE;000,ONE;101,ZERO;111,ONE;101,ZERO;110,ZERO;111,ONE;001,ZERO;100,ZERO;011,ONE;111,ONE;001,ZERO;111,ONE;010,ZERO;000,ONE;110,ZERO;111,ONE;010,ZERO;011,ONE;111,ONE;000,ONE;010,ZERO;010,ZERO;000,ONE;110,ZERO;010,ZERO;010,ZERO;100,ZERO;010,ZERO;111,ONE;110,ZERO;011,ONE;110,ZERO;101,ZERO;111,ONE;100,ZERO;100,ZERO;100,ZERO;000,ONE;011,ONE;101,ZERO;111,ONE;100,ZERO;110,ZERO;100,ZERO;101,ZERO;110,ZERO;101,ZERO;010,ZERO;010,ZERO;111,ONE;111,ONE;010,ZERO;100,ZERO;111,ONE;000,ONE;110,ZERO;110,ZERO;101,ZERO;001,ZERO;0,ERROR", 
        tokenStream("1100101110011110000100010111110010010111110111111011100011000111110101100101110011111001010010100000010110111011110011110110001011101010110001011111011101110011000111110011110100001101110100111110000100100001100100101000101111100111101011111001001000000111011111001101001011101010100101111110101001110001101101010010"));
	}

}