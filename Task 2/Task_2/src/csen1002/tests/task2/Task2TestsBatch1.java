package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch1 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12#b;n;s#0,b,1;1,e,0;1,e,3;2,e,0;2,e,3;3,s,4;4,e,8;5,e,6;6,e,8;7,e,2;7,e,5;8,e,12;9,n,10;10,e,12;11,e,7;11,e,9#11#12");
		assertEquals("-1;0/1/3;0/2/3/5/6/7/8/9/11/12;4/8/12;10/12#b;n;s#-1,b,-1;-1,n,-1;-1,s,-1;0/1/3,b,0/1/3;0/1/3,n,-1;0/1/3,s,4/8/12;0/2/3/5/6/7/8/9/11/12,b,0/1/3;0/2/3/5/6/7/8/9/11/12,n,10/12;0/2/3/5/6/7/8/9/11/12,s,4/8/12;4/8/12,b,-1;4/8/12,n,-1;4/8/12,s,-1;10/12,b,-1;10/12,n,-1;10/12,s,-1#0/2/3/5/6/7/8/9/11/12#0/2/3/5/6/7/8/9/11/12;4/8/12;10/12", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#k;s#0,k,0;0,k,2;0,k,3;0,k,6;0,s,2;0,s,4;0,s,5;0,s,6;0,s,8;1,k,0;1,k,4;1,k,6;1,k,7;1,s,0;1,s,1;1,s,2;1,s,4;1,s,5;1,s,6;1,s,8;2,k,0;2,k,1;2,k,3;2,k,5;2,k,6;2,k,7;2,s,2;2,s,3;2,s,5;2,s,6;3,k,0;3,k,1;3,k,3;3,k,4;3,k,5;3,k,6;3,k,7;3,s,0;3,s,1;3,s,2;3,s,3;3,s,5;3,s,7;3,s,8;4,k,1;4,k,2;4,k,6;4,k,7;4,k,8;4,s,0;4,s,1;4,s,2;4,s,3;4,s,4;4,s,7;5,k,0;5,k,1;5,k,3;5,k,4;5,k,5;5,k,6;5,k,7;5,s,0;5,s,1;5,s,2;5,s,3;5,s,4;5,s,5;5,s,8;6,k,3;6,k,4;6,k,7;6,k,8;6,s,1;6,s,2;6,s,4;6,s,5;6,s,7;6,s,8;7,k,1;7,k,4;7,k,5;7,k,7;7,k,8;7,s,0;7,s,2;7,s,3;7,s,4;7,s,6;7,s,8;8,k,1;8,k,3;8,k,4;8,k,6;8,s,1;8,s,3;8,s,7;8,s,8#4#1;2;6;7;8");
		assertEquals("0/1/2/3/4/5/6/7/8;0/1/2/3/4/7;0/1/3/4/5/6/7/8;1/2/6/7/8;4#k;s#0/1/2/3/4/5/6/7/8,k,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,s,0/1/2/3/4/5/6/7/8;0/1/2/3/4/7,k,0/1/2/3/4/5/6/7/8;0/1/2/3/4/7,s,0/1/2/3/4/5/6/7/8;0/1/3/4/5/6/7/8,k,0/1/2/3/4/5/6/7/8;0/1/3/4/5/6/7/8,s,0/1/2/3/4/5/6/7/8;1/2/6/7/8,k,0/1/3/4/5/6/7/8;1/2/6/7/8,s,0/1/2/3/4/5/6/7/8;4,k,1/2/6/7/8;4,s,0/1/2/3/4/7#4#0/1/2/3/4/5/6/7/8;0/1/2/3/4/7;0/1/3/4/5/6/7/8;1/2/6/7/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#j;r;v#0,e,1;0,e,5;0,j,0;0,j,1;0,j,2;0,j,3;0,j,4;0,j,7;0,j,8;0,r,2;0,r,3;0,r,5;0,r,7;0,v,0;0,v,4;0,v,7;0,v,10;1,e,5;1,e,8;1,j,4;1,j,5;1,j,7;1,j,10;1,r,0;1,r,1;1,r,2;1,r,3;1,r,5;1,r,7;1,r,8;1,v,2;1,v,3;1,v,6;1,v,8;2,e,1;2,e,2;2,e,5;2,j,2;2,j,3;2,j,7;2,j,9;2,j,10;2,r,2;2,r,4;2,r,5;2,r,8;2,r,9;2,r,10;2,v,0;2,v,2;2,v,4;2,v,6;2,v,7;2,v,9;2,v,10;3,j,1;3,j,6;3,j,7;3,j,8;3,j,9;3,r,1;3,r,2;3,r,3;3,r,6;3,r,7;3,r,10;3,v,5;3,v,6;3,v,9;3,v,10;4,e,3;4,j,1;4,j,2;4,j,3;4,j,4;4,j,10;4,r,1;4,r,2;4,r,3;4,r,4;4,r,7;4,r,8;4,r,10;4,v,0;4,v,2;4,v,3;4,v,6;4,v,7;4,v,9;5,j,0;5,j,2;5,j,3;5,j,4;5,j,5;5,j,8;5,j,9;5,r,0;5,r,1;5,r,3;5,r,5;5,r,8;5,r,9;5,r,10;5,v,1;5,v,3;5,v,5;5,v,6;5,v,9;6,e,6;6,j,1;6,j,2;6,j,8;6,j,9;6,j,10;6,r,0;6,r,1;6,r,2;6,r,4;6,r,5;6,r,10;6,v,1;6,v,2;6,v,7;6,v,9;7,e,8;7,j,1;7,j,2;7,j,4;7,j,5;7,j,6;7,r,0;7,r,1;7,r,4;7,r,9;7,r,10;7,v,1;7,v,2;7,v,3;7,v,4;7,v,6;7,v,10;8,j,6;8,j,8;8,j,9;8,j,10;8,r,0;8,r,3;8,r,5;8,r,8;8,r,9;8,v,5;8,v,6;8,v,7;8,v,8;9,j,1;9,j,2;9,j,4;9,j,8;9,r,2;9,r,3;9,r,5;9,r,7;9,r,8;9,r,10;9,v,3;9,v,4;9,v,5;9,v,7;10,e,9;10,j,0;10,j,1;10,j,6;10,j,9;10,r,0;10,r,2;10,r,6;10,r,8;10,r,10;10,v,2;10,v,6;10,v,8;10,v,10#2#6;8");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/7/8/9/10;1/2/5/8#j;r;v#0/1/2/3/4/5/6/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,r,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,v,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/7/8/9/10,r,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/7/8/9/10,v,0/1/2/3/4/5/6/7/8/9/10;1/2/5/8,j,0/1/2/3/4/5/6/7/8/9/10;1/2/5/8,r,0/1/2/3/4/5/7/8/9/10;1/2/5/8,v,0/1/2/3/4/5/6/7/8/9/10#1/2/5/8#0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/7/8/9/10;1/2/5/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#g;u#0,e,0;0,g,2;0,g,4;0,g,5;0,g,6;0,g,8;0,g,9;0,g,10;0,u,1;0,u,4;0,u,5;0,u,7;0,u,8;0,u,10;1,e,1;1,g,4;1,g,6;1,g,7;1,g,10;1,g,11;1,u,0;1,u,1;1,u,4;1,u,9;1,u,10;2,e,2;2,g,3;2,g,6;2,g,7;2,g,8;2,g,9;2,g,10;2,g,11;2,u,0;2,u,1;2,u,2;2,u,4;2,u,5;2,u,9;3,g,3;3,g,5;3,g,6;3,g,7;3,g,8;3,u,0;3,u,1;3,u,2;3,u,3;3,u,6;3,u,10;4,g,0;4,g,1;4,g,3;4,g,4;4,g,6;4,g,9;4,g,10;4,u,0;4,u,1;4,u,2;4,u,3;4,u,5;4,u,7;4,u,9;5,g,0;5,g,1;5,g,5;5,g,9;5,u,0;5,u,1;5,u,3;5,u,5;5,u,7;5,u,10;6,g,0;6,g,2;6,g,3;6,g,4;6,g,5;6,g,10;6,g,11;6,u,1;6,u,3;6,u,5;6,u,6;6,u,8;6,u,11;7,g,2;7,g,4;7,g,6;7,g,7;7,g,11;7,u,0;7,u,1;7,u,2;7,u,7;7,u,8;7,u,10;7,u,11;8,e,8;8,g,0;8,g,2;8,g,4;8,g,5;8,g,6;8,g,8;8,g,9;8,u,2;8,u,3;8,u,4;8,u,6;8,u,7;8,u,8;8,u,11;9,e,9;9,g,0;9,g,4;9,g,6;9,g,8;9,g,9;9,g,10;9,u,0;9,u,3;9,u,4;9,u,6;9,u,8;9,u,10;10,g,2;10,g,6;10,g,9;10,g,11;10,u,0;10,u,1;10,u,2;10,u,5;10,u,7;10,u,8;10,u,10;11,e,11;11,g,1;11,g,2;11,g,3;11,g,5;11,g,7;11,u,0;11,u,2;11,u,5;11,u,9;11,u,10;11,u,11#4#5;10");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/7/9;0/1/3/4/6/9/10;4#g;u#0/1/2/3/4/5/6/7/8/9/10/11,g,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,u,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/7/9,g,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/7/9,u,0/1/2/3/4/5/6/7/8/9/10/11;0/1/3/4/6/9/10,g,0/1/2/3/4/5/6/7/8/9/10/11;0/1/3/4/6/9/10,u,0/1/2/3/4/5/6/7/8/9/10/11;4,g,0/1/3/4/6/9/10;4,u,0/1/2/3/5/7/9#4#0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/5/7/9;0/1/3/4/6/9/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#n;s;x#0,e,5;0,n,0;0,n,1;0,n,3;0,n,4;0,n,5;0,n,7;0,s,0;0,s,1;0,s,3;0,s,4;0,s,5;0,s,6;0,s,7;0,x,0;0,x,1;0,x,2;0,x,3;0,x,4;0,x,5;0,x,7;1,n,0;1,n,1;1,n,3;1,n,4;1,n,5;1,n,7;1,s,4;1,s,5;1,s,6;1,s,7;1,x,0;1,x,2;1,x,3;1,x,4;1,x,6;1,x,7;2,e,0;2,e,4;2,n,0;2,n,1;2,n,3;2,n,6;2,n,7;2,s,0;2,s,2;2,s,3;2,s,4;2,x,1;2,x,2;2,x,3;2,x,4;2,x,5;2,x,6;3,e,4;3,n,0;3,n,2;3,n,3;3,n,6;3,s,0;3,s,1;3,s,2;3,s,3;3,s,5;3,s,6;3,x,1;3,x,3;3,x,4;3,x,5;3,x,6;3,x,7;4,e,4;4,n,0;4,n,1;4,n,2;4,n,3;4,n,4;4,n,5;4,n,7;4,s,1;4,s,2;4,s,3;4,s,5;4,s,6;4,x,2;4,x,3;4,x,4;4,x,5;4,x,6;5,e,1;5,n,1;5,n,2;5,n,3;5,n,4;5,n,5;5,n,6;5,n,7;5,s,1;5,s,2;5,s,3;5,s,5;5,s,6;5,s,7;5,x,0;5,x,3;5,x,4;5,x,5;5,x,6;6,e,4;6,n,0;6,n,3;6,n,5;6,n,6;6,s,0;6,s,1;6,s,2;6,s,4;6,s,5;6,s,6;6,s,7;6,x,0;6,x,1;6,x,3;6,x,5;6,x,6;6,x,7;7,e,4;7,e,6;7,e,7;7,n,2;7,n,3;7,n,4;7,n,6;7,n,7;7,s,0;7,s,1;7,s,3;7,s,4;7,s,5;7,s,6;7,x,0;7,x,2;7,x,3;7,x,4;7,x,5#1#0;2;3;4;5");
		assertEquals("0/1/2/3/4/5/6/7;0/1/3/4/5/6/7;1;1/4/5/6/7#n;s;x#0/1/2/3/4/5/6/7,n,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,s,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,x,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,n,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,s,0/1/2/3/4/5/6/7;0/1/3/4/5/6/7,x,0/1/2/3/4/5/6/7;1,n,0/1/3/4/5/6/7;1,s,1/4/5/6/7;1,x,0/1/2/3/4/5/6/7;1/4/5/6/7,n,0/1/2/3/4/5/6/7;1/4/5/6/7,s,0/1/2/3/4/5/6/7;1/4/5/6/7,x,0/1/2/3/4/5/6/7#1#0/1/2/3/4/5/6/7;0/1/3/4/5/6/7;1/4/5/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9#i;s;y#0,i,1;1,e,5;2,e,3;3,e,5;4,e,0;4,e,2;5,y,6;6,s,7;7,e,4;7,e,9;8,e,4;8,e,9#8#9");
		assertEquals("-1;0/2/3/4/5/7/9;0/2/3/4/5/8/9;1/5;6#i;s;y#-1,i,-1;-1,s,-1;-1,y,-1;0/2/3/4/5/7/9,i,1/5;0/2/3/4/5/7/9,s,-1;0/2/3/4/5/7/9,y,6;0/2/3/4/5/8/9,i,1/5;0/2/3/4/5/8/9,s,-1;0/2/3/4/5/8/9,y,6;1/5,i,-1;1/5,s,-1;1/5,y,6;6,i,-1;6,s,0/2/3/4/5/7/9;6,y,-1#0/2/3/4/5/8/9#0/2/3/4/5/7/9;0/2/3/4/5/8/9", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#a;c#0,a,0;0,a,2;0,a,3;0,a,5;0,a,7;0,a,8;0,a,9;0,c,0;0,c,1;0,c,2;0,c,3;0,c,10;1,a,0;1,a,3;1,a,4;1,a,8;1,c,0;1,c,1;1,c,2;1,c,3;1,c,4;1,c,7;1,c,9;2,a,1;2,a,6;2,a,7;2,a,8;2,c,2;2,c,5;2,c,7;2,c,8;2,c,10;3,a,0;3,a,1;3,a,3;3,a,5;3,a,6;3,a,7;3,c,0;3,c,2;3,c,3;3,c,5;3,c,7;3,c,8;3,c,9;4,a,0;4,a,1;4,a,4;4,a,7;4,a,9;4,a,10;4,c,0;4,c,2;4,c,3;4,c,8;4,c,9;4,c,10;5,a,0;5,a,1;5,a,3;5,a,7;5,a,9;5,a,10;5,c,0;5,c,3;5,c,7;5,c,10;6,a,1;6,a,2;6,a,4;6,a,5;6,a,7;6,a,9;6,a,10;6,c,2;6,c,3;6,c,5;6,c,7;7,a,0;7,a,1;7,a,2;7,a,3;7,a,4;7,a,6;7,c,0;7,c,1;7,c,3;7,c,6;7,c,7;7,c,8;8,a,0;8,a,2;8,a,6;8,a,7;8,a,9;8,c,1;8,c,7;8,c,8;8,c,9;8,c,10;9,a,1;9,a,2;9,a,5;9,a,6;9,a,9;9,c,2;9,c,3;9,c,4;9,c,6;9,c,8;9,c,10;10,a,3;10,a,5;10,a,6;10,a,7;10,a,10;10,c,0;10,c,1;10,c,2;10,c,4;10,c,6;10,c,7;10,c,9#8#0;1;2;10");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/10;0/1/2/3/4/6/7/8/9/10;0/2/6/7/9;1/7/8/9/10;8#a;c#0/1/2/3/4/5/6/7/8/9/10,a,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,c,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/10,a,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/10,c,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/6/7/8/9/10,a,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/6/7/8/9/10,c,0/1/2/3/4/5/6/7/8/9/10;0/2/6/7/9,a,0/1/2/3/4/5/6/7/8/9/10;0/2/6/7/9,c,0/1/2/3/4/5/6/7/8/10;1/7/8/9/10,a,0/1/2/3/4/5/6/7/8/9/10;1/7/8/9/10,c,0/1/2/3/4/6/7/8/9/10;8,a,0/2/6/7/9;8,c,1/7/8/9/10#8#0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/10;0/1/2/3/4/6/7/8/9/10;0/2/6/7/9;1/7/8/9/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11;12#g;l#0,e,3;0,e,12;0,g,5;0,g,6;0,g,9;0,g,10;0,g,11;0,g,12;0,l,1;0,l,2;0,l,10;0,l,11;0,l,12;1,g,0;1,g,4;1,g,6;1,g,7;1,g,11;1,l,3;1,l,4;1,l,5;1,l,8;2,g,2;2,g,4;2,g,6;2,g,8;2,g,11;2,l,1;2,l,2;2,l,3;2,l,4;2,l,8;2,l,9;2,l,10;3,e,0;3,g,1;3,g,3;3,g,6;3,g,7;3,l,0;3,l,6;3,l,8;3,l,12;4,e,7;4,g,1;4,g,3;4,g,4;4,g,8;4,g,9;4,g,12;4,l,0;4,l,1;4,l,3;4,l,5;4,l,6;4,l,10;4,l,12;5,g,0;5,g,3;5,g,5;5,g,12;5,l,3;5,l,9;5,l,10;5,l,12;6,e,0;6,e,11;6,g,1;6,g,3;6,g,4;6,g,6;6,g,7;6,g,9;6,g,12;6,l,0;6,l,2;6,l,5;6,l,9;6,l,11;6,l,12;7,g,0;7,g,2;7,g,3;7,g,6;7,g,8;7,l,0;7,l,3;7,l,4;7,l,7;8,e,1;8,e,10;8,g,2;8,g,4;8,g,7;8,g,12;8,l,4;8,l,5;8,l,8;8,l,9;8,l,10;8,l,11;9,e,1;9,e,10;9,g,0;9,g,1;9,g,2;9,g,5;9,g,7;9,g,9;9,g,11;9,l,1;9,l,2;9,l,4;9,l,5;9,l,11;9,l,12;10,g,0;10,g,1;10,g,2;10,g,6;10,g,9;10,l,4;10,l,5;10,l,8;10,l,10;10,l,11;11,g,2;11,g,3;11,g,4;11,g,10;11,g,11;11,g,12;11,l,0;11,l,1;11,l,2;11,l,4;11,l,8;11,l,9;11,l,12;12,g,1;12,g,3;12,g,7;12,g,10;12,l,0;12,l,1;12,l,2;12,l,3;12,l,5;12,l,8#0#0;2;9");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/5/6/8/10/11/12;0/1/3/5/6/7/9/10/11/12;0/3/12#g;l#0/1/2/3/4/5/6/7/8/9/10/11/12,g,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/4/5/6/7/8/9/10/11/12,l,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/5/6/8/10/11/12,g,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/5/6/8/10/11/12,l,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/3/5/6/7/9/10/11/12,g,0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/3/5/6/7/9/10/11/12,l,0/1/2/3/4/5/6/7/8/9/10/11/12;0/3/12,g,0/1/3/5/6/7/9/10/11/12;0/3/12,l,0/1/2/3/5/6/8/10/11/12#0/3/12#0/1/2/3/4/5/6/7/8/9/10/11/12;0/1/2/3/5/6/8/10/11/12;0/1/3/5/6/7/9/10/11/12;0/3/12", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#k;l;x#0,k,2;0,k,3;0,k,5;0,k,7;0,l,1;0,l,2;0,l,4;0,l,6;0,x,1;0,x,3;0,x,5;0,x,7;1,k,0;1,k,1;1,k,4;1,k,5;1,k,6;1,l,0;1,l,2;1,l,3;1,l,4;1,l,5;1,l,6;1,l,7;1,x,3;1,x,5;1,x,6;1,x,7;2,k,1;2,k,2;2,k,3;2,k,4;2,k,6;2,k,7;2,l,0;2,l,1;2,l,2;2,l,5;2,l,6;2,x,0;2,x,1;2,x,3;2,x,4;2,x,5;2,x,7;3,k,1;3,k,2;3,k,4;3,k,5;3,k,7;3,l,1;3,l,4;3,l,5;3,l,7;3,x,0;3,x,1;3,x,2;3,x,3;3,x,5;3,x,6;3,x,7;4,k,0;4,k,2;4,k,3;4,k,4;4,k,5;4,k,6;4,k,7;4,l,0;4,l,1;4,l,2;4,l,3;4,l,4;4,l,6;4,l,7;4,x,0;4,x,1;4,x,2;4,x,3;4,x,4;4,x,6;5,k,0;5,k,1;5,k,4;5,k,5;5,k,6;5,k,7;5,l,1;5,l,2;5,l,3;5,l,4;5,l,5;5,l,7;5,x,0;5,x,1;5,x,2;5,x,3;5,x,4;5,x,7;6,k,0;6,k,1;6,k,3;6,k,5;6,l,0;6,l,2;6,l,3;6,l,4;6,l,5;6,l,6;6,l,7;6,x,0;6,x,1;6,x,2;6,x,3;6,x,4;6,x,5;6,x,7;7,k,0;7,k,2;7,k,5;7,k,7;7,l,0;7,l,1;7,l,3;7,l,4;7,l,5;7,l,7;7,x,0;7,x,1;7,x,3;7,x,4;7,x,5;7,x,6#6#0;2;3;5;6");
		assertEquals("0/1/2/3/4/5/6/7;0/1/2/3/4/5/7;0/1/3/5;0/2/3/4/5/6/7;6#k;l;x#0/1/2/3/4/5/6/7,k,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,l,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,x,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,k,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,l,0/1/2/3/4/5/6/7;0/1/2/3/4/5/7,x,0/1/2/3/4/5/6/7;0/1/3/5,k,0/1/2/3/4/5/6/7;0/1/3/5,l,0/1/2/3/4/5/6/7;0/1/3/5,x,0/1/2/3/4/5/6/7;0/2/3/4/5/6/7,k,0/1/2/3/4/5/6/7;0/2/3/4/5/6/7,l,0/1/2/3/4/5/6/7;0/2/3/4/5/6/7,x,0/1/2/3/4/5/6/7;6,k,0/1/3/5;6,l,0/2/3/4/5/6/7;6,x,0/1/2/3/4/5/7#6#0/1/2/3/4/5/6/7;0/1/2/3/4/5/7;0/1/3/5;0/2/3/4/5/6/7;6", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#b;c;n;p;z#0,p,1;1,e,5;2,b,3;3,e,5;4,e,0;4,e,2;5,e,11;6,c,7;7,z,8;8,n,9;9,e,11;10,e,4;10,e,6#10#11");
		assertEquals("-1;0/2/4/6/10;1/5/11;3/5/11;7;8;9/11#b;c;n;p;z#-1,b,-1;-1,c,-1;-1,n,-1;-1,p,-1;-1,z,-1;0/2/4/6/10,b,3/5/11;0/2/4/6/10,c,7;0/2/4/6/10,n,-1;0/2/4/6/10,p,1/5/11;0/2/4/6/10,z,-1;1/5/11,b,-1;1/5/11,c,-1;1/5/11,n,-1;1/5/11,p,-1;1/5/11,z,-1;3/5/11,b,-1;3/5/11,c,-1;3/5/11,n,-1;3/5/11,p,-1;3/5/11,z,-1;7,b,-1;7,c,-1;7,n,-1;7,p,-1;7,z,8;8,b,-1;8,c,-1;8,n,9/11;8,p,-1;8,z,-1;9/11,b,-1;9/11,c,-1;9/11,n,-1;9/11,p,-1;9/11,z,-1#0/2/4/6/10#1/5/11;3/5/11;9/11", nfaToDfa.toString());
	}

}