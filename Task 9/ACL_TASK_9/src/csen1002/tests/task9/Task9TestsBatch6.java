package csen1002.tests.task9;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task9.Task9Lexer;
import csen1002.main.task9.Task9Parser;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task9TestsBatch6 {
	
    /**
     * Parses a provided string using Task 9's grammar
     * and gets the value of the attribute "check" of the variable "s"
     *
     * @param input a string to parse
     * @return the value of the attribute "check" of the variable "s"
     */
    public static int sCheckValue(String input) {
        Task9Lexer lexer = new Task9Lexer(CharStreams.fromString(input));
        Task9Parser parser = new Task9Parser(new CommonTokenStream(lexer));
        return parser.s().check;
    }

	@Test
	public void testString1() {
		assertEquals(1, sCheckValue("1000000000000000000#0100000000000000000#0010000000000000000#0001000000000000000#0000100000000000000#0000010000000000000#0000001000000000000#0000000100000000000#0000000010000000000#0000000001000000000#0000000000100000000#0000000000010000000"));
	}

	@Test
	public void testString2() {
	    assertEquals(0, sCheckValue("10110011011011100#10100000010110110#01111101110101101#01110110100110001#01000011111100001#10000010100010010#00100101000101001#10110011000010011#00010101000111111#10000001100010001#10011000110100001#00111101011001010#01001100001000010#00001111100101010#01010100010001101#01001111000110100#01110100011111111"));
	}

	@Test
	public void testString3() {
		assertEquals(0, sCheckValue("1010001000#0010111101#1111101010#0000010010#0011101011#0011110000#1111101110#1111101010#0101110000#0100101110"));
	}

	@Test
	public void testString4() {
		assertEquals(0, sCheckValue("011010101111110111#010111011101110001#110010011010101101#110110011111011001#011001111010101111#010001111011100001#001010011010110001#100010110111001101#011111011001011011#000011001110101011#100100101001001110#000010001110110010#011010011101010001#111011100101111101#010010111010111011#100110000011101001#010111011110000001#110001101001001001"));
	}

	@Test
	public void testString5() {
		assertEquals(0, sCheckValue("010000010110#110111010100#001001010101#110111010000#010110001001#011000000010#111010111100#100101101011#010011011000#101001001100#000010010011#110000111011"));
	}

	@Test
	public void testString6() {
		assertEquals(0, sCheckValue("010011111111000#110011010001111#011100100101001#000010011000100#110111111010010#101010100100111#000000111100010#001010001010010#010001010011010#011110010011010#101011110011010#111001100000101#010010000111110#101000010000111#001000111100010"));
	}

	@Test
	public void testString7() {
		assertEquals(0, sCheckValue("1011100#0000110#1010010#1010000#0000100#1001001#0000011"));
	}

	@Test
	public void testString8() {
		assertEquals(0, sCheckValue("000011110011110#101000110010001#011001000111010#010100110110011#011010101010000#011010001111010#000000011100111#100110111110000#100110101111101#110001101111010#011110100010011#111011000011100#011100011000000#100010111001010#000000001001101"));
	}

	@Test
	public void testString9() {
		assertEquals(1, sCheckValue("10000#01000#00100#00010#00001"));
	}

	@Test
	public void testString10() {
		assertEquals(0, sCheckValue("10000000000000000000000000#0100000000000000000000000#00100000000000000000#0001000000000000000000000#00001000000000#00000100000000000000000#0000001000000000000#0000000100000000000"));
	}

}
